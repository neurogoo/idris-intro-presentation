---
patat:
    slideLevel: 3
    images:
        backend: iterm2
...
#+Title: Whirlwind tour to Idris and dependent types
#+Author: Toni Okuogume
#+OPTIONS: num:nil toc:nil
#+REVEAL_PLUGINS: (highlight)
* What I am going talk about
:PROPERTIES:
:COMMENT: Remember to tell what you would like people getting out of this talk
:END:
*** Table of contents
- Motivation
- Basic structures
- Fancy things with dependent types
- Conclusion
* Motivation  
*** Motivation
- Exhaustive testing
- Fixing disconnect between the idea of the program with the code of the program
- Having ability to fully express invariants in the system
  + How to make sure that there are no invalid state transitions
  + How to encode all the rules that some piece of data like password has to follow
*** Motivating example
    #+BEGIN_EXAMPLE
           +--------------------------------------------------------------------------------+
           |                                                                                |
           |    +--------------------+                              +---------------------+ |
           |    |                    |    Logging in/Logging out    |                     | |
           |    |      LoggedOut     |<------------+--------------->|    LoggedIn         | |
           |    |                    |             |                |                     | |
           |    +--------------------+             |                | + Add to Store      | |
           |                  ^                    |                | + Display store     | |
           |                  |   Failed attempt   |                |                     | |
           |                  +--------------------+                +---------------------+ |
           |                                                                                |
           |  + Message                                                                     |
           +--------------------------------------------------------------------------------+
    #+END_EXAMPLE

* What is Idris
*** What is Idris
- Pure strict functional language with dependent types
- Version 1.0 2017, current version 1.3.1
- Developed by Edwin Brady from University of St Andrews (Scotland)
- Default backend C, also Javascript available
** Functions
*** Functions
#+BEGIN_SRC idris
 hello : String -> String
 hello name = "Hello " ++ name
#+END_SRC

- same in Typescript

#+BEGIN_SRC typescript
  function hello(name: string) {
      return "Hello " + name
  }
#+END_SRC

*** Functions
You can give names to all type arguments
#+BEGIN_SRC idris
  greeter : (name : String) -> (city : String) -> String
  greeter name city = "Hello " ++ name ++ " from " ++ city
#+END_SRC

Anonymous functions

#+BEGIN_SRC idris
  \name, city => "Hello " ++ name ++ " from " ++ city
#+END_SRC
** Data types
*** Data types: Sum types
    Also called tagged or discriminated unions
   #+BEGIN_SRC idris
     data AuthorisationStatus = NotAuthorised | Authorised
   #+END_SRC

   #+BEGIN_SRC idris
     data Color = Red | Green | Blue
   #+END_SRC

   #+BEGIN_SRC idris
     data Pets = Dogs Nat | Cats Nat | NoPets
   #+END_SRC

*** Data types: Sum types
   Can be also writen in form
   #+BEGIN_SRC idris
     data AuthorisationStatus where
       NotAuthorised : AuthorisationStatus
       Authorised : AuthorisationStatus
   #+END_SRC
*** Data types: Dependent data type
   #+BEGIN_SRC idris
     data PriceCategory = Regular | Membership

     data ProductPrice : (price : Double) -> PriceCategory -> Type where
       RegularPrice : ProductPrice price Regular
       BestBeforePrice : ProductPrice price Regular
       MembershipPrice : (discountPercent : Double) -> ProductPrice price Membership
   #+END_SRC
*** Data types: Pattern matching
    #+BEGIN_SRC idris
      calculateFinalPrice : (productPrice : ProductPrice price category) -> Double
      calculateFinalPrice {price} RegularPrice = price
      calculateFinalPrice {price} BestBeforePrice = 0.7 * price
      calculateFinalPrice {price} (MembershipPrice discount) = discount * price
    #+END_SRC
*** Data types: Record types
   Also called product types
   #+BEGIN_SRC idris
     record Car where
       constructor MkCar
       model : String
       year : Int

     car : Car
     car = MkCar "Ferrari" 1988
   #+END_SRC

   #+BEGIN_EXAMPLE
     λΠ> model car
     "Ferrari" : String
     λΠ> year car
     1988 : Int
   #+END_EXAMPLE

*** Interfaces
    - For implementing constrained generic types
    - Think of Rust traits or Haskell type classes
    #+BEGIN_SRC idris
      data Example = MkExample

      interface Show a where
        show : a -> String

      Show Example where
        show MkExample = "You gave me example"
    #+END_SRC
* Dependent types
*** Dependent types
   Analogous to having first class functions
   - First class functions :: Functions can take other functions as parameters and return functions
   - First class types :: Functions can take types as parameters and return types
*** Simple example
   Function returning type
   #+BEGIN_SRC idris
     isSingleton : Bool -> Type
     isSingleton True = Nat
     isSingleton False = List Nat
   #+END_SRC

   - Using
   #+BEGIN_SRC idris
     giveMeNumber : (multiple : Bool) -> (isSingleton multiple)
     giveMeNumber False = [2,2,2]
     giveMeNumber True = 2
   #+END_SRC
   
*** Mixing type level and value level
   Referring to (implicit) argument in value level
   #+BEGIN_SRC idris
     sayLength : Vect n a -> String
     sayLength {n} _ = "You gave Vector of length " ++ (cast n)
   #+END_SRC

- Example

#+BEGIN_EXAMPLE
  λΠ> sayLength [1,2,3]
  "You gave Vector of length 3" : String
#+END_EXAMPLE
*** Auto proof
    #+BEGIN_SRC idris
      limitedOffer : (productPrice : ProductPrice price category) -> {auto p : price < 20.0 = True} -> Double
      limitedOffer {price} _ = 0.5 * price
    #+END_SRC

    #+BEGIN_EXAMPLE
      λΠ> limitedOffer (the (ProductPrice 19.0 Regular) RegularPrice)
      9.5 : Double
    #+END_EXAMPLE
*** Compile time testing
    
    #+BEGIN_SRC idris
      unitTest1 : limitedOffer (the (ProductPrice 19.0 Regular) RegularPrice) = 0.5 * 19.0
      unitTest1 = Refl

      -- Does not typecheck
      unitTest2 : limitedOffer (the (ProductPrice 21.0 Regular) RegularPrice) = 0.5 * 21.0
    #+END_SRC

    #+BEGIN_EXAMPLE
       When checking type of Testing.unitTest2:
       When checking argument p to Testing.limitedOffer:
               Can't find a value of type 
                       False = True
    #+END_EXAMPLE

** Dependent pair
*** Dependent pair
    - Dependent pair
    #+BEGIN_SRC idris
      (a ** b)
    #+END_SRC
    Where type of b is /dependent/ on type of a
    - Think, "There is some value of type /a/ that so that type /b/ exist"   
    - Also called as Sigma types or Existential types
*** Dependent pair
    Simple example
    #+BEGIN_SRC idris
      squareIsFour : (n ** (n * n = 4))
      squareIsFour = (2 ** Refl)
    #+END_SRC
*** Dependent pair
    More complicated example
    #+BEGIN_SRC idris
      record Login where
        constructor MkLogin
        loginName : String
        password : (p : String ** length p `GTE` 12)

      passwordStrengthChecker : (password : String) -> Dec (length password `GTE` 12)
      passwordStrengthChecker password = isLTE 12 (length password)

      createNewUser : (loginName : String) -> (password : String) -> Either String Login
      createNewUser loginName password = case passwordStrengthChecker password of
        Yes prf => Right $ MkLogin loginName (password ** prf)
        No prf  => Left "Password was not long enough"
    #+END_SRC
** Step up
*** More requirements 
    #+BEGIN_SRC idris
      hasSpecialSymbols : String -> Type
      hasSpecialSymbols password =
        let specialCharacters = 
          Data.SortedSet.toList (intersection (fromList ['#','%','&','+']) (fromList $ unpack password))
        in length specialCharacters `GT` 0

      longEnoughPassword : String -> Nat -> Type
      longEnoughPassword password n = length password `GTE` n

      passwordRequirements : String -> Type
      passwordRequirements password = 
        (password ** Pair (hasSpecialSymbols password) (longEnoughPassword password 12))
    #+END_SRC
*** Checking requirements
    #+BEGIN_SRC idris
      symbolCheck : (password : String) -> Dec (hasSpecialSymbols password)
      symbolCheck password =
        let specialCharacters = 
          Data.SortedSet.toList (intersection (fromList ['#','%','&','+']) (fromList $ unpack password))
        in isLTE 1 (length specialCharacters)

      passwordStrengthChecker : (password : String) -> Dec (length password `GTE` 12)
      passwordStrengthChecker password = isLTE 12 (length password)

      checkRequirements : (p : String) -> Either String (passwordRequirements p)
      checkRequirements password =
        case (symbolCheck password, passwordStrengthChecker password) of
          (Yes prf1, Yes prf2) => Right $ (password ** (prf1,prf2))
          _ => Left "Not good enough password"
    #+END_SRC
** Typed state machine with dependent types
*** State machine interface
    #+BEGIN_SRC idris
      data Access = LoggedOut | LoggedIn

      data UsernameCheck = Authorized | NotAuthorized

      data DataStore : (a : Type) -> (beforeState : Access) -> (afterStateFn : a -> Access) -> Type where
    #+END_SRC    
*** State machine interface: Access management
    #+BEGIN_SRC idris
      data DataStore : (a : Type) -> (beforeState : Access) -> (afterStateFn : a -> Access) -> Type where
        LoginToStore : (username : String)
                     -> DataStore UsernameCheck LoggedOut (\check => case check of
                                                                        Authorized => LoggedIn
                                                                        NotAuthorized => LoggedOut)
        LogoutFromStore : DataStore () LoggedIn (const LoggedOut)
    #+END_SRC
*** State machine interface: Combining operations
    #+BEGIN_SRC idris
      (>>=) : DataStore a state1 state2Fn 
            -> ((res : a) -> DataStore b (state2Fn res) state3Fn) 
            -> DataStore b state1 state3Fn

      -- Example
      LoginToStore "user" >>= \res => LogoutFromStore

      -- Syntactic sugar
      test = do
        LoginToStore "user"
        LogoutFromStore
    #+END_SRC
*** State machine interface: Example error
    #+BEGIN_EXAMPLE
       Specifically:
               Type mismatch between
                       LoggedIn
               and
                       case _ of
                         Authorized => LoggedIn
                         NotAuthorized => LoggedOut

    #+END_EXAMPLE
*** State machine interface: Data management
    #+BEGIN_SRC idris
        AddToList : a -> List a -> DataStore (List a) LoggedIn (const LoggedIn)
        Display : (Show a) => a -> DataStore () LoggedIn (const LoggedIn)
        Message : String -> DataStore () state (const state)
    #+END_SRC
*** State machine interface
    #+BEGIN_SRC idris
      data DataStore : (a : Type) -> (beforeState : Access) -> (afterStateFn : a -> Access) -> Type where
        LoginToStore : (username : String)
                     -> DataStore UsernameCheck LoggedOut (\check => case check of
                                                                          Authorized => LoggedIn
                                                                          NotAuthorized => LoggedOut)
        LogoutFromStore : DataStore () LoggedIn (const LoggedOut)

        AddToList : a -> List a -> DataStore (List a) LoggedIn (const LoggedIn)
        Display : (Show a) => a -> DataStore () LoggedIn (const LoggedIn)
        Message : String -> DataStore () state (const state)

        Pure : (res : m) -> DataStore m (stateFn res) stateFn
        (>>=) : DataStore a state1 state2Fn 
              -> ((res : a) -> DataStore b (state2Fn res) state3Fn) 
              -> DataStore b state1 state3Fn
    #+END_SRC 
*** State machine runner
    #+BEGIN_SRC idris
      runDataStore : DataStore res state1 state2fn -> IO res
      runDataStore (LoginToStore username) =
        case username of
          "root" => pure Authorized
          _      => pure NotAuthorized
      runDataStore LogoutFromStore = pure ()
      runDataStore (AddToList x xs) = pure (x :: xs)
      runDataStore (Display as) = do putStrLn $ show as
                                     pure ()
      runDataStore (Message s) = do putStrLn s
                                    pure ()
      runDataStore (Pure x) = pure x
      runDataStore (x >>= f) = do r <- runDataStore x
                                  runDataStore (f r)
    #+END_SRC
*** Example DSL program
    #+BEGIN_SRC idris
      addAndDisplay : DataStore () LoggedOut (const LoggedOut)
      addAndDisplay = do
        res <- LoginToStore "root"
        case res of
          NotAuthorized => Message "Not authorized user"
          Authorized => do
            store <- AddToList "Super secret secret" []
            Display store
            store <- AddToList "Second super secret secret" store
            Display store
            LogoutFromStore
    #+END_SRC
*** Running DSL
    #+BEGIN_EXAMPLE
      λΠ> :x runDataStore addAndDisplay

      ["Super secret secret"]
      ["Second super secret secret", "Super secret secret"]
    #+END_EXAMPLE
* Conclusion
*** Conclusion
   So, rewrite everything in Ru...Idris?
*** Problems
   - Runtime very slow
   - Mostly 1 person academic project
   - Pretty non-existant library ecosystem
*** Use-cases
   - Prototype compilicated code paths
   - Check proof correctness
   - Expand mind about the possible future of the field
** Books
*** Idris book 
 [[./idris_book.jpg]]
*** The Little Typer
 [[./the_little_typer.jpg]]
*** Other languages to look for
 - Haskell with extensions
 - Agda
 - ATS
 - Coq
 - F* (not directly related F#)
 - TLA+
 - Idris 2
   + will have for example linear types
* Questions?
** Sources and links
- Type-Driven Development with Idris
- Idris tutorial http://docs.idris-lang.org/en/latest/index.html
- Running serverless Idris https://donaldpinckney.com/idris/2019/03/26/idris-serverless.html
* Extras
** Views
*** Views
   - Extending pattern matching
   - Some times there is need for alternative view point to data structure
     + For example classical linked list (1 (2 (3 (4 Nil))))
     + Easy to think from start to end, but harder to think from end to start
     + What if we want to pattern match last item on list?
*** Views
    Normal list
     #+BEGIN_SRC idris
       data List : (a : Type) -> Type where
         Nil : List a
         (::) : (x : a) -> (xs : List a) -> List a
     #+END_SRC 
*** Views
    Reverse cons order
     #+BEGIN_SRC idris
       data ListLast : List a -> Type where
         Empty : ListLast []
         NonEmpty : (xs : List a) -> (x : a) -> ListLast (xs ++ [x])
     #+END_SRC
*** Views
    Helper function to convert normal List to ListLast
    #+BEGIN_SRC idris
      total
      listLast : (xs : List a) -> ListLast xs
      listLast [] = Empty
      listLast (x :: xs) = 
        case listLast xs of
          Empty => NonEmpty [] x
          NonEmpty ys y => NonEmpty (x :: ys) y
    #+END_SRC
*** Views
    #+BEGIN_SRC idris
      describeListEnd : List Int -> String
      describeListEnd input with (listLast input)
        describeListEnd []          | Empty = "Empty"
        describeListEnd (xs ++ [x]) | (NonEmpty xs x)
                = "Non-empty, initial portion = " ++ show xs
    #+END_SRC
** Views with dependent types
*** Example: NatToBin
#+BEGIN_SRC idris
  natToBin : Nat -> List Bool
#+END_SRC
#+BEGIN_SRC idris
  data Parity : Nat -> Type where
     Even : Parity (n + n)
     Odd  : Parity (S (n + n))
#+END_SRC
*** Example: NatToBin
    - *plusSuccRightSucc* proof that 1 + (x + y) = x + (1 + y)
    #+BEGIN_SRC idris
      helpEven : (j : Nat) -> Parity (S j + S j) -> Parity (S (S (plus j j)))
      helpEven j p = rewrite plusSuccRightSucc j j in p

      helpOdd : (j : Nat) -> Parity (S (S (j + S j))) -> Parity (S (S (S (j + j))))
      helpOdd j p = rewrite plusSuccRightSucc j j in p
    #+END_SRC
*** Example: NatToBin
    #+BEGIN_SRC idris
      parity : (n:Nat) -> Parity n
      parity Z     = Even {n=Z}
      parity (S Z) = Odd {n=Z}
      parity (S (S k)) with (parity k)
        parity (S (S (j + j)))     | Even = helpEven j (Even {n = S j})
        parity (S (S (S (j + j)))) | Odd  = helpOdd j (Odd {n = S j})
    #+END_SRC
*** Example: NatToBin
    #+BEGIN_SRC idris
      natToBin : Nat -> List Bool
      natToBin Z = Nil
      natToBin k with (parity k)
         natToBin (j + j)     | Even = False :: natToBin j
         natToBin (S (j + j)) | Odd  = True  :: natToBin j
    #+END_SRC 
** Formal proof of leftPad
*** Formal proof of leftPad
    - What should leftPad function do?
      /Left pad should take padding character, output string length and starting string/
      /and it should output a new string that is padded with given padding character/
     /from left side of the starting string until the new string is same size as the/
     /given size limit. If size limit is smaller than the original string, give back/
     /just the original string/
*** Formal proof of leftPad
    Naive solution
    #+BEGIN_SRC idris
      simpleLeftPad : Char -> Int -> String -> String
      simpleLeftPad padChar paddingLength xs = xs
    #+END_SRC
*** Formal proof of leftPad
    #+BEGIN_SRC idris
      import Data.Vect

      -- `minus` is saturating subtraction, so this works like we want it to
      eq_max : (n, k : Nat) -> maximum k n = plus (n `minus` k) k
      eq_max  n     Z    = rewrite minusZeroRight n in 
                           rewrite plusZeroRightNeutral n in Refl
      eq_max  Z    (S _) = Refl
      eq_max (S n) (S k) = rewrite sym $ plusSuccRightSucc (n `minus` k) k in 
                           rewrite eq_max n k in Refl

      -- The type here says "the result is" padded to (maximum k n), and is padding plus the original
      leftPad : (x : a) -> (n : Nat) -> (xs : Vect k a)
             -> (ys : Vect (maximum k n) a ** m : Nat ** ys = replicate m x ++ xs)
      leftPad {k} x n xs = rewrite eq_max n k in 
                           (replicate (n `minus` k) x ++ xs ** n `minus` k ** Refl)
    #+END_SRC
Code from https://github.com/hwayne/lets-prove-leftpad/blob/master/idris/Leftpad.idr

