---
patat:
    slideLevel: 3
    images:
        backend: iterm2
...
#+Title: Whirlwind tour to Idris and dependent types
#+Author: Toni Okuogume
#+OPTIONS: num:nil toc:nil
#+REVEAL_PLUGINS: (highlight)
* What I am going talk about
- Motivation
- Basic structures
- Fancy things with dependent types
- Conclusion
* Motivation  
- Fixing disconnect between the idea of the program with the code of the program
- Currently used type systems don't have the ability express necessary ideas
* What is Idris
- Pure strict functional language with dependent types
- Version 1.0 2017, current version 1.3
- Developed by Edwin Brady from University of St Andrews
** Basic syntax
*** Functions
#+BEGIN_SRC idris
  f : String
  f = "Testing"
#+END_SRC
*** Functions
Takes a parameter
#+BEGIN_SRC idris
 hello : String -> String
 hello n = "Hello " ++ n
#+END_SRC
*** Functions
You can give names to all type arguments
#+BEGIN_SRC idris
  greeter : (name : String) -> (city : String) -> String
  greeter name city = "Hello " ++ name ++ " from " ++ city
#+END_SRC
*** Functions
You can also refer to implicit arguments
#+BEGIN_SRC idris
  sayLength : Vect n a -> String
  sayLength {n} _ = "You gave Vector of length " ++ (cast n)
#+END_SRC
** Basic syntax: data
*** Data types
   Sum types
   #+BEGIN_SRC idris
     data AuthorisationStatus = NotAuthorised | Authorised
   #+END_SRC
*** Data types
   Can be also writen in form
   #+BEGIN_SRC idris
     data AuthorisationStatus where
       NotAuthorised : AuthorisationStatus
       Authorised : AuthorisationStatus
   #+END_SRC
*** Data types
   Dependent data types
   #+BEGIN_SRC idris
     data PriceCategory = Regular | BestBefore | Membership

     data ProductPrice : PriceCategory -> Type where
       Regular : ProductPrice Regular
       BestBefore : ProductPrice BestBefore
       Membership : (discountprecent : Float) -> ProductPrice Membership
   #+END_SRC
*** Data types
   Record types
   #+BEGIN_SRC idris
     record Tictactoe where
       constructor MkTicTacToe
       gameBoard : Grid
       nextTurn : PlayerTurn
   #+END_SRC
** A step up
*** Interfaces
    - For implementing constrained generic types
    - Think of Rust traits or Haskell type classes
    #+BEGIN_SRC idris
      interface Show a where
        show : a -> String
    #+END_SRC
** Views and pattern matching
*** Pattern matching
    #+BEGIN_SRC idris
      data HotDrinks = Coffee | Tea

      congratulation : HotDrinks -> String
      congratulation Coffee = "First grind beans"
      congratulation Tea    = "First boil water"
    #+END_SRC
*** Views
**** Views
   - Some times there is need for alternative view point to data structure
     + For example classical linked list (1 (2 (3 (4 Nil))))
     + What if we want to go backwards without reversing first?
**** Normal list
     #+BEGIN_SRC idris
       data MyList : (a : Type) -> Type where
         Nil : MyList a
         (::) : (x : a) -> (xs : MyList a) -> MyList a
     #+END_SRC 
**** Reverse cons order
     #+BEGIN_SRC idris
       data ListLast : List a -> Type where
         Empty : ListLast []
         NonEmpty : (xs : List a) -> (x : a) -> ListLast (xs ++ [x])
     #+END_SRC
**** 
* Dependent types
** Dependent types
   Analogous to having first class functions
   - First class functions :: Functions can take other functions as parameters and return functions
   - First class types :: Functions can take types as parameters and return types
** Simple example
   Function returning type
   #+BEGIN_SRC idris
     isSingleton : Bool -> Type
     isSingleton True = Nat
     isSingleton False = List Nat
   #+END_SRC
** Dependent pair
*** Dependent pair
    - Dependent pair
    #+BEGIN_SRC idris
      (a ** b)
    #+END_SRC
    Where type of b is /dependent/ on type of a
    - Think, "There is some value of type /a/ that so that type /b/ exist"   
    - Also called as Sigma types
*** Dependent pair
    Simple example
    #+BEGIN_SRC idris
      squareIsFour : (n ** (n * n = 4))
      squareIsFour = (2 ** Refl)
    #+END_SRC
** Views with dependent types
*** Example: NatToBin
#+BEGIN_SRC idris
  natToBin : Nat -> List Bool
#+END_SRC
#+BEGIN_SRC idris
  data Parity : Nat -> Type where
     Even : Parity (n + n)
     Odd  : Parity (S (n + n))
#+END_SRC
** Formal proof of leftPad
*** Formal proof of leftPad
    - What should leftPad function do?
      /Left pad should take padding character, output string length and starting string/
      /and it should output a new string that is padded with given padding character/
     /from left side of the starting string until the new string is same size as the/
     /given size limit. If size limit is smaller than the original string, give back/
     /just the original string/
*** Formal proof of leftPad
*** Formal proof of leftPad
    #+BEGIN_SRC idris
      simpleLeftPad : Char -> Int -> String -> String
      simpleLeftPad x n xs = xs
    #+END_SRC
*** Formal proof of leftPad [2/2]
    #+BEGIN_SRC idris
      import Data.Vect

      -- `minus` is saturating subtraction, so this works like we want it to
      eq_max : (n, k : Nat) -> maximum k n = plus (n `minus` k) k
      eq_max  n     Z    = rewrite minusZeroRight n in 
                           rewrite plusZeroRightNeutral n in Refl
      eq_max  Z    (S _) = Refl
      eq_max (S n) (S k) = rewrite sym $ plusSuccRightSucc (n `minus` k) k in 
                           rewrite eq_max n k in Refl

      -- The type here says "the result is" padded to (maximum k n), and is padding plus the original
      leftPad : (x : a) -> (n : Nat) -> (xs : Vect k a)
             -> (ys : Vect (maximum k n) a ** m : Nat ** ys = replicate m x ++ xs)
      leftPad {k} x n xs = rewrite eq_max n k in 
                           (replicate (n `minus` k) x ++ xs ** n `minus` k ** Refl)
    #+END_SRC
Code from https://github.com/hwayne/lets-prove-leftpad/blob/master/idris/Leftpad.idr
** Typed state machine with dependent types
*** State machine interface
    #+BEGIN_SRC idris
      data Access = LoggedOut | LoggedIn

      interface DataStore (m : Type -> Type) where
        Store : Access -> Type

        connect : ST m Var [add (Store LoggedOut)]
        disconnect : (store : Var) -> ST m () [remove store (Store LoggedOut)]

        readSecret : (store : Var) -> ST m String [store ::: Store LoggedIn]
        login : (store : Var) ->
                ST m LoginResult [store ::: Store LoggedOut :->
                                   (\res => Store (case res of
                                                        OK => LoggedIn
                                                        BadPassword => LoggedOut))]
        logout : (store : Var) -> ST m () [store ::: Store LoggedIn :-> Store LoggedOut]
    #+END_SRC
* Conclusion
** Conclusion
   So, rewrite everything in Ru...Idris?
*** Problems
   - Runtime very slow
   - Mostly 1 person academic project
   - Pretty non-existant library ecosystem
*** Use-cases
   - Prototype compilicated code paths
   - Proof correctness
   - Expand mind about the possible future of the field
** Books
*** 
 [[./idris_book.jpg]]
***  
 [[./the_little_typer.jpg]]
*** Some similar languages
 - Adga
 - F*
 - ATS
 - Haskell with extensions
 - Idris 2
   + will have for example linear types
** Sources
- Idris tutorial

